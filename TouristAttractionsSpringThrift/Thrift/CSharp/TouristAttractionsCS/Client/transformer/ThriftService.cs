/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace transformer
{
  public partial class ThriftService {
    public interface Iface {
      void Login(AgencyUser agencyUser);
      #if SILVERLIGHT
      IAsyncResult Begin_Login(AsyncCallback callback, object state, AgencyUser agencyUser);
      void End_Login(IAsyncResult asyncResult);
      #endif
      void Logout(int port);
      #if SILVERLIGHT
      IAsyncResult Begin_Logout(AsyncCallback callback, object state, int port);
      void End_Logout(IAsyncResult asyncResult);
      #endif
      int GetReservationsSize();
      #if SILVERLIGHT
      IAsyncResult Begin_GetReservationsSize(AsyncCallback callback, object state);
      int End_GetReservationsSize(IAsyncResult asyncResult);
      #endif
      void AddReservation(Reservation reservation);
      #if SILVERLIGHT
      IAsyncResult Begin_AddReservation(AsyncCallback callback, object state, Reservation reservation);
      void End_AddReservation(IAsyncResult asyncResult);
      #endif
      void UpdateTrip(Trip trip);
      #if SILVERLIGHT
      IAsyncResult Begin_UpdateTrip(AsyncCallback callback, object state, Trip trip);
      void End_UpdateTrip(IAsyncResult asyncResult);
      #endif
      List<AgencyUser> FindAllAgencyUsers();
      #if SILVERLIGHT
      IAsyncResult Begin_FindAllAgencyUsers(AsyncCallback callback, object state);
      List<AgencyUser> End_FindAllAgencyUsers(IAsyncResult asyncResult);
      #endif
      List<Trip> FindAllTrips();
      #if SILVERLIGHT
      IAsyncResult Begin_FindAllTrips(AsyncCallback callback, object state);
      List<Trip> End_FindAllTrips(IAsyncResult asyncResult);
      #endif
      AgencyUser SearchAgencyUserByUserNameAndPassword(string userName, string password);
      #if SILVERLIGHT
      IAsyncResult Begin_SearchAgencyUserByUserNameAndPassword(AsyncCallback callback, object state, string userName, string password);
      AgencyUser End_SearchAgencyUserByUserNameAndPassword(IAsyncResult asyncResult);
      #endif
      List<Trip> SearchTripByTouristAttractionAndLeavingHour(string touristAttraction, LocalTime hour1, LocalTime hour2);
      #if SILVERLIGHT
      IAsyncResult Begin_SearchTripByTouristAttractionAndLeavingHour(AsyncCallback callback, object state, string touristAttraction, LocalTime hour1, LocalTime hour2);
      List<Trip> End_SearchTripByTouristAttractionAndLeavingHour(IAsyncResult asyncResult);
      #endif
      void notifyServer();
      #if SILVERLIGHT
      IAsyncResult Begin_notifyServer(AsyncCallback callback, object state);
      void End_notifyServer(IAsyncResult asyncResult);
      #endif
      void addObserver(int port);
      #if SILVERLIGHT
      IAsyncResult Begin_addObserver(AsyncCallback callback, object state, int port);
      void End_addObserver(IAsyncResult asyncResult);
      #endif
    }

    public class Client : IDisposable, Iface {
      public Client(TProtocol prot) : this(prot, prot)
      {
      }

      public Client(TProtocol iprot, TProtocol oprot)
      {
        iprot_ = iprot;
        oprot_ = oprot;
      }

      protected TProtocol iprot_;
      protected TProtocol oprot_;
      protected int seqid_;

      public TProtocol InputProtocol
      {
        get { return iprot_; }
      }
      public TProtocol OutputProtocol
      {
        get { return oprot_; }
      }


      #region " IDisposable Support "
      private bool _IsDisposed;

      // IDisposable
      public void Dispose()
      {
        Dispose(true);
      }
      

      protected virtual void Dispose(bool disposing)
      {
        if (!_IsDisposed)
        {
          if (disposing)
          {
            if (iprot_ != null)
            {
              ((IDisposable)iprot_).Dispose();
            }
            if (oprot_ != null)
            {
              ((IDisposable)oprot_).Dispose();
            }
          }
        }
        _IsDisposed = true;
      }
      #endregion


      
      #if SILVERLIGHT
      public IAsyncResult Begin_Login(AsyncCallback callback, object state, AgencyUser agencyUser)
      {
        return send_Login(callback, state, agencyUser);
      }

      public void End_Login(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_Login();
      }

      #endif

      public void Login(AgencyUser agencyUser)
      {
        #if !SILVERLIGHT
        send_Login(agencyUser);
        recv_Login();

        #else
        var asyncResult = Begin_Login(null, null, agencyUser);
        End_Login(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Login(AsyncCallback callback, object state, AgencyUser agencyUser)
      #else
      public void send_Login(AgencyUser agencyUser)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Login", TMessageType.Call, seqid_));
        Login_args args = new Login_args();
        args.AgencyUser = agencyUser;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_Login()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Login_result result = new Login_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Logout(AsyncCallback callback, object state, int port)
      {
        return send_Logout(callback, state, port);
      }

      public void End_Logout(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_Logout();
      }

      #endif

      public void Logout(int port)
      {
        #if !SILVERLIGHT
        send_Logout(port);
        recv_Logout();

        #else
        var asyncResult = Begin_Logout(null, null, port);
        End_Logout(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Logout(AsyncCallback callback, object state, int port)
      #else
      public void send_Logout(int port)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Logout", TMessageType.Call, seqid_));
        Logout_args args = new Logout_args();
        args.Port = port;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_Logout()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Logout_result result = new Logout_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetReservationsSize(AsyncCallback callback, object state)
      {
        return send_GetReservationsSize(callback, state);
      }

      public int End_GetReservationsSize(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetReservationsSize();
      }

      #endif

      public int GetReservationsSize()
      {
        #if !SILVERLIGHT
        send_GetReservationsSize();
        return recv_GetReservationsSize();

        #else
        var asyncResult = Begin_GetReservationsSize(null, null);
        return End_GetReservationsSize(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetReservationsSize(AsyncCallback callback, object state)
      #else
      public void send_GetReservationsSize()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetReservationsSize", TMessageType.Call, seqid_));
        GetReservationsSize_args args = new GetReservationsSize_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public int recv_GetReservationsSize()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetReservationsSize_result result = new GetReservationsSize_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetReservationsSize failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_AddReservation(AsyncCallback callback, object state, Reservation reservation)
      {
        return send_AddReservation(callback, state, reservation);
      }

      public void End_AddReservation(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_AddReservation();
      }

      #endif

      public void AddReservation(Reservation reservation)
      {
        #if !SILVERLIGHT
        send_AddReservation(reservation);
        recv_AddReservation();

        #else
        var asyncResult = Begin_AddReservation(null, null, reservation);
        End_AddReservation(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_AddReservation(AsyncCallback callback, object state, Reservation reservation)
      #else
      public void send_AddReservation(Reservation reservation)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("AddReservation", TMessageType.Call, seqid_));
        AddReservation_args args = new AddReservation_args();
        args.Reservation = reservation;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_AddReservation()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        AddReservation_result result = new AddReservation_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_UpdateTrip(AsyncCallback callback, object state, Trip trip)
      {
        return send_UpdateTrip(callback, state, trip);
      }

      public void End_UpdateTrip(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_UpdateTrip();
      }

      #endif

      public void UpdateTrip(Trip trip)
      {
        #if !SILVERLIGHT
        send_UpdateTrip(trip);
        recv_UpdateTrip();

        #else
        var asyncResult = Begin_UpdateTrip(null, null, trip);
        End_UpdateTrip(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_UpdateTrip(AsyncCallback callback, object state, Trip trip)
      #else
      public void send_UpdateTrip(Trip trip)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("UpdateTrip", TMessageType.Call, seqid_));
        UpdateTrip_args args = new UpdateTrip_args();
        args.Trip = trip;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_UpdateTrip()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        UpdateTrip_result result = new UpdateTrip_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_FindAllAgencyUsers(AsyncCallback callback, object state)
      {
        return send_FindAllAgencyUsers(callback, state);
      }

      public List<AgencyUser> End_FindAllAgencyUsers(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_FindAllAgencyUsers();
      }

      #endif

      public List<AgencyUser> FindAllAgencyUsers()
      {
        #if !SILVERLIGHT
        send_FindAllAgencyUsers();
        return recv_FindAllAgencyUsers();

        #else
        var asyncResult = Begin_FindAllAgencyUsers(null, null);
        return End_FindAllAgencyUsers(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_FindAllAgencyUsers(AsyncCallback callback, object state)
      #else
      public void send_FindAllAgencyUsers()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("FindAllAgencyUsers", TMessageType.Call, seqid_));
        FindAllAgencyUsers_args args = new FindAllAgencyUsers_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<AgencyUser> recv_FindAllAgencyUsers()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        FindAllAgencyUsers_result result = new FindAllAgencyUsers_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "FindAllAgencyUsers failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_FindAllTrips(AsyncCallback callback, object state)
      {
        return send_FindAllTrips(callback, state);
      }

      public List<Trip> End_FindAllTrips(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_FindAllTrips();
      }

      #endif

      public List<Trip> FindAllTrips()
      {
        #if !SILVERLIGHT
        send_FindAllTrips();
        return recv_FindAllTrips();

        #else
        var asyncResult = Begin_FindAllTrips(null, null);
        return End_FindAllTrips(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_FindAllTrips(AsyncCallback callback, object state)
      #else
      public void send_FindAllTrips()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("FindAllTrips", TMessageType.Call, seqid_));
        FindAllTrips_args args = new FindAllTrips_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<Trip> recv_FindAllTrips()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        FindAllTrips_result result = new FindAllTrips_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "FindAllTrips failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_SearchAgencyUserByUserNameAndPassword(AsyncCallback callback, object state, string userName, string password)
      {
        return send_SearchAgencyUserByUserNameAndPassword(callback, state, userName, password);
      }

      public AgencyUser End_SearchAgencyUserByUserNameAndPassword(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_SearchAgencyUserByUserNameAndPassword();
      }

      #endif

      public AgencyUser SearchAgencyUserByUserNameAndPassword(string userName, string password)
      {
        #if !SILVERLIGHT
        send_SearchAgencyUserByUserNameAndPassword(userName, password);
        return recv_SearchAgencyUserByUserNameAndPassword();

        #else
        var asyncResult = Begin_SearchAgencyUserByUserNameAndPassword(null, null, userName, password);
        return End_SearchAgencyUserByUserNameAndPassword(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_SearchAgencyUserByUserNameAndPassword(AsyncCallback callback, object state, string userName, string password)
      #else
      public void send_SearchAgencyUserByUserNameAndPassword(string userName, string password)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("SearchAgencyUserByUserNameAndPassword", TMessageType.Call, seqid_));
        SearchAgencyUserByUserNameAndPassword_args args = new SearchAgencyUserByUserNameAndPassword_args();
        args.UserName = userName;
        args.Password = password;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public AgencyUser recv_SearchAgencyUserByUserNameAndPassword()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        SearchAgencyUserByUserNameAndPassword_result result = new SearchAgencyUserByUserNameAndPassword_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SearchAgencyUserByUserNameAndPassword failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_SearchTripByTouristAttractionAndLeavingHour(AsyncCallback callback, object state, string touristAttraction, LocalTime hour1, LocalTime hour2)
      {
        return send_SearchTripByTouristAttractionAndLeavingHour(callback, state, touristAttraction, hour1, hour2);
      }

      public List<Trip> End_SearchTripByTouristAttractionAndLeavingHour(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_SearchTripByTouristAttractionAndLeavingHour();
      }

      #endif

      public List<Trip> SearchTripByTouristAttractionAndLeavingHour(string touristAttraction, LocalTime hour1, LocalTime hour2)
      {
        #if !SILVERLIGHT
        send_SearchTripByTouristAttractionAndLeavingHour(touristAttraction, hour1, hour2);
        return recv_SearchTripByTouristAttractionAndLeavingHour();

        #else
        var asyncResult = Begin_SearchTripByTouristAttractionAndLeavingHour(null, null, touristAttraction, hour1, hour2);
        return End_SearchTripByTouristAttractionAndLeavingHour(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_SearchTripByTouristAttractionAndLeavingHour(AsyncCallback callback, object state, string touristAttraction, LocalTime hour1, LocalTime hour2)
      #else
      public void send_SearchTripByTouristAttractionAndLeavingHour(string touristAttraction, LocalTime hour1, LocalTime hour2)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("SearchTripByTouristAttractionAndLeavingHour", TMessageType.Call, seqid_));
        SearchTripByTouristAttractionAndLeavingHour_args args = new SearchTripByTouristAttractionAndLeavingHour_args();
        args.TouristAttraction = touristAttraction;
        args.Hour1 = hour1;
        args.Hour2 = hour2;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<Trip> recv_SearchTripByTouristAttractionAndLeavingHour()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        SearchTripByTouristAttractionAndLeavingHour_result result = new SearchTripByTouristAttractionAndLeavingHour_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SearchTripByTouristAttractionAndLeavingHour failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_notifyServer(AsyncCallback callback, object state)
      {
        return send_notifyServer(callback, state);
      }

      public void End_notifyServer(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_notifyServer();
      }

      #endif

      public void notifyServer()
      {
        #if !SILVERLIGHT
        send_notifyServer();
        recv_notifyServer();

        #else
        var asyncResult = Begin_notifyServer(null, null);
        End_notifyServer(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_notifyServer(AsyncCallback callback, object state)
      #else
      public void send_notifyServer()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("notifyServer", TMessageType.Call, seqid_));
        notifyServer_args args = new notifyServer_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_notifyServer()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        notifyServer_result result = new notifyServer_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_addObserver(AsyncCallback callback, object state, int port)
      {
        return send_addObserver(callback, state, port);
      }

      public void End_addObserver(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_addObserver();
      }

      #endif

      public void addObserver(int port)
      {
        #if !SILVERLIGHT
        send_addObserver(port);
        recv_addObserver();

        #else
        var asyncResult = Begin_addObserver(null, null, port);
        End_addObserver(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_addObserver(AsyncCallback callback, object state, int port)
      #else
      public void send_addObserver(int port)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("addObserver", TMessageType.Call, seqid_));
        addObserver_args args = new addObserver_args();
        args.Port = port;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_addObserver()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        addObserver_result result = new addObserver_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

    }
    public class Processor : TProcessor {
      public Processor(Iface iface)
      {
        iface_ = iface;
        processMap_["Login"] = Login_Process;
        processMap_["Logout"] = Logout_Process;
        processMap_["GetReservationsSize"] = GetReservationsSize_Process;
        processMap_["AddReservation"] = AddReservation_Process;
        processMap_["UpdateTrip"] = UpdateTrip_Process;
        processMap_["FindAllAgencyUsers"] = FindAllAgencyUsers_Process;
        processMap_["FindAllTrips"] = FindAllTrips_Process;
        processMap_["SearchAgencyUserByUserNameAndPassword"] = SearchAgencyUserByUserNameAndPassword_Process;
        processMap_["SearchTripByTouristAttractionAndLeavingHour"] = SearchTripByTouristAttractionAndLeavingHour_Process;
        processMap_["notifyServer"] = notifyServer_Process;
        processMap_["addObserver"] = addObserver_Process;
      }

      protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
      private Iface iface_;
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public bool Process(TProtocol iprot, TProtocol oprot)
      {
        try
        {
          TMessage msg = iprot.ReadMessageBegin();
          ProcessFunction fn;
          processMap_.TryGetValue(msg.Name, out fn);
          if (fn == null) {
            TProtocolUtil.Skip(iprot, TType.Struct);
            iprot.ReadMessageEnd();
            TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
            x.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
            return true;
          }
          fn(msg.SeqID, iprot, oprot);
        }
        catch (IOException)
        {
          return false;
        }
        return true;
      }

      public void Login_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Login_args args = new Login_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Login_result result = new Login_result();
        iface_.Login(args.AgencyUser);
        oprot.WriteMessageBegin(new TMessage("Login", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Logout_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Logout_args args = new Logout_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Logout_result result = new Logout_result();
        iface_.Logout(args.Port);
        oprot.WriteMessageBegin(new TMessage("Logout", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetReservationsSize_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetReservationsSize_args args = new GetReservationsSize_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetReservationsSize_result result = new GetReservationsSize_result();
        result.Success = iface_.GetReservationsSize();
        oprot.WriteMessageBegin(new TMessage("GetReservationsSize", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void AddReservation_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        AddReservation_args args = new AddReservation_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        AddReservation_result result = new AddReservation_result();
        iface_.AddReservation(args.Reservation);
        oprot.WriteMessageBegin(new TMessage("AddReservation", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void UpdateTrip_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        UpdateTrip_args args = new UpdateTrip_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        UpdateTrip_result result = new UpdateTrip_result();
        iface_.UpdateTrip(args.Trip);
        oprot.WriteMessageBegin(new TMessage("UpdateTrip", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void FindAllAgencyUsers_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        FindAllAgencyUsers_args args = new FindAllAgencyUsers_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        FindAllAgencyUsers_result result = new FindAllAgencyUsers_result();
        result.Success = iface_.FindAllAgencyUsers();
        oprot.WriteMessageBegin(new TMessage("FindAllAgencyUsers", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void FindAllTrips_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        FindAllTrips_args args = new FindAllTrips_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        FindAllTrips_result result = new FindAllTrips_result();
        result.Success = iface_.FindAllTrips();
        oprot.WriteMessageBegin(new TMessage("FindAllTrips", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void SearchAgencyUserByUserNameAndPassword_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        SearchAgencyUserByUserNameAndPassword_args args = new SearchAgencyUserByUserNameAndPassword_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        SearchAgencyUserByUserNameAndPassword_result result = new SearchAgencyUserByUserNameAndPassword_result();
        result.Success = iface_.SearchAgencyUserByUserNameAndPassword(args.UserName, args.Password);
        oprot.WriteMessageBegin(new TMessage("SearchAgencyUserByUserNameAndPassword", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void SearchTripByTouristAttractionAndLeavingHour_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        SearchTripByTouristAttractionAndLeavingHour_args args = new SearchTripByTouristAttractionAndLeavingHour_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        SearchTripByTouristAttractionAndLeavingHour_result result = new SearchTripByTouristAttractionAndLeavingHour_result();
        result.Success = iface_.SearchTripByTouristAttractionAndLeavingHour(args.TouristAttraction, args.Hour1, args.Hour2);
        oprot.WriteMessageBegin(new TMessage("SearchTripByTouristAttractionAndLeavingHour", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void notifyServer_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        notifyServer_args args = new notifyServer_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        notifyServer_result result = new notifyServer_result();
        iface_.notifyServer();
        oprot.WriteMessageBegin(new TMessage("notifyServer", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void addObserver_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        addObserver_args args = new addObserver_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        addObserver_result result = new addObserver_result();
        iface_.addObserver(args.Port);
        oprot.WriteMessageBegin(new TMessage("addObserver", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Login_args : TBase
    {
      private AgencyUser _agencyUser;

      public AgencyUser AgencyUser
      {
        get
        {
          return _agencyUser;
        }
        set
        {
          __isset.agencyUser = true;
          this._agencyUser = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool agencyUser;
      }

      public Login_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                AgencyUser = new AgencyUser();
                AgencyUser.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("Login_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (AgencyUser != null && __isset.agencyUser) {
          field.Name = "agencyUser";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          AgencyUser.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("Login_args(");
        sb.Append("AgencyUser: ");
        sb.Append(AgencyUser== null ? "<null>" : AgencyUser.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Login_result : TBase
    {

      public Login_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("Login_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("Login_result(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Logout_args : TBase
    {
      private int _port;

      public int Port
      {
        get
        {
          return _port;
        }
        set
        {
          __isset.port = true;
          this._port = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool port;
      }

      public Logout_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                Port = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("Logout_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.port) {
          field.Name = "port";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Port);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("Logout_args(");
        sb.Append("Port: ");
        sb.Append(Port);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Logout_result : TBase
    {

      public Logout_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("Logout_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("Logout_result(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetReservationsSize_args : TBase
    {

      public GetReservationsSize_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetReservationsSize_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetReservationsSize_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetReservationsSize_result : TBase
    {
      private int _success;

      public int Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetReservationsSize_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetReservationsSize_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetReservationsSize_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class AddReservation_args : TBase
    {
      private Reservation _reservation;

      public Reservation Reservation
      {
        get
        {
          return _reservation;
        }
        set
        {
          __isset.reservation = true;
          this._reservation = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool reservation;
      }

      public AddReservation_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Reservation = new Reservation();
                Reservation.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("AddReservation_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Reservation != null && __isset.reservation) {
          field.Name = "reservation";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Reservation.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("AddReservation_args(");
        sb.Append("Reservation: ");
        sb.Append(Reservation== null ? "<null>" : Reservation.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class AddReservation_result : TBase
    {

      public AddReservation_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("AddReservation_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("AddReservation_result(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class UpdateTrip_args : TBase
    {
      private Trip _trip;

      public Trip Trip
      {
        get
        {
          return _trip;
        }
        set
        {
          __isset.trip = true;
          this._trip = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool trip;
      }

      public UpdateTrip_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Trip = new Trip();
                Trip.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("UpdateTrip_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Trip != null && __isset.trip) {
          field.Name = "trip";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Trip.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("UpdateTrip_args(");
        sb.Append("Trip: ");
        sb.Append(Trip== null ? "<null>" : Trip.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class UpdateTrip_result : TBase
    {

      public UpdateTrip_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("UpdateTrip_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("UpdateTrip_result(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class FindAllAgencyUsers_args : TBase
    {

      public FindAllAgencyUsers_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("FindAllAgencyUsers_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("FindAllAgencyUsers_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class FindAllAgencyUsers_result : TBase
    {
      private List<AgencyUser> _success;

      public List<AgencyUser> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public FindAllAgencyUsers_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<AgencyUser>();
                  TList _list0 = iprot.ReadListBegin();
                  for( int _i1 = 0; _i1 < _list0.Count; ++_i1)
                  {
                    AgencyUser _elem2 = new AgencyUser();
                    _elem2 = new AgencyUser();
                    _elem2.Read(iprot);
                    Success.Add(_elem2);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("FindAllAgencyUsers_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (AgencyUser _iter3 in Success)
              {
                _iter3.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("FindAllAgencyUsers_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class FindAllTrips_args : TBase
    {

      public FindAllTrips_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("FindAllTrips_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("FindAllTrips_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class FindAllTrips_result : TBase
    {
      private List<Trip> _success;

      public List<Trip> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public FindAllTrips_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<Trip>();
                  TList _list4 = iprot.ReadListBegin();
                  for( int _i5 = 0; _i5 < _list4.Count; ++_i5)
                  {
                    Trip _elem6 = new Trip();
                    _elem6 = new Trip();
                    _elem6.Read(iprot);
                    Success.Add(_elem6);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("FindAllTrips_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (Trip _iter7 in Success)
              {
                _iter7.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("FindAllTrips_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SearchAgencyUserByUserNameAndPassword_args : TBase
    {
      private string _userName;
      private string _password;

      public string UserName
      {
        get
        {
          return _userName;
        }
        set
        {
          __isset.userName = true;
          this._userName = value;
        }
      }

      public string Password
      {
        get
        {
          return _password;
        }
        set
        {
          __isset.password = true;
          this._password = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool userName;
        public bool password;
      }

      public SearchAgencyUserByUserNameAndPassword_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                UserName = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Password = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("SearchAgencyUserByUserNameAndPassword_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (UserName != null && __isset.userName) {
          field.Name = "userName";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(UserName);
          oprot.WriteFieldEnd();
        }
        if (Password != null && __isset.password) {
          field.Name = "password";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Password);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("SearchAgencyUserByUserNameAndPassword_args(");
        sb.Append("UserName: ");
        sb.Append(UserName);
        sb.Append(",Password: ");
        sb.Append(Password);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SearchAgencyUserByUserNameAndPassword_result : TBase
    {
      private AgencyUser _success;

      public AgencyUser Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public SearchAgencyUserByUserNameAndPassword_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new AgencyUser();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("SearchAgencyUserByUserNameAndPassword_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("SearchAgencyUserByUserNameAndPassword_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SearchTripByTouristAttractionAndLeavingHour_args : TBase
    {
      private string _touristAttraction;
      private LocalTime _hour1;
      private LocalTime _hour2;

      public string TouristAttraction
      {
        get
        {
          return _touristAttraction;
        }
        set
        {
          __isset.touristAttraction = true;
          this._touristAttraction = value;
        }
      }

      public LocalTime Hour1
      {
        get
        {
          return _hour1;
        }
        set
        {
          __isset.hour1 = true;
          this._hour1 = value;
        }
      }

      public LocalTime Hour2
      {
        get
        {
          return _hour2;
        }
        set
        {
          __isset.hour2 = true;
          this._hour2 = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool touristAttraction;
        public bool hour1;
        public bool hour2;
      }

      public SearchTripByTouristAttractionAndLeavingHour_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                TouristAttraction = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Hour1 = new LocalTime();
                Hour1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                Hour2 = new LocalTime();
                Hour2.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("SearchTripByTouristAttractionAndLeavingHour_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (TouristAttraction != null && __isset.touristAttraction) {
          field.Name = "touristAttraction";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(TouristAttraction);
          oprot.WriteFieldEnd();
        }
        if (Hour1 != null && __isset.hour1) {
          field.Name = "hour1";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Hour1.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Hour2 != null && __isset.hour2) {
          field.Name = "hour2";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          Hour2.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("SearchTripByTouristAttractionAndLeavingHour_args(");
        sb.Append("TouristAttraction: ");
        sb.Append(TouristAttraction);
        sb.Append(",Hour1: ");
        sb.Append(Hour1== null ? "<null>" : Hour1.ToString());
        sb.Append(",Hour2: ");
        sb.Append(Hour2== null ? "<null>" : Hour2.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SearchTripByTouristAttractionAndLeavingHour_result : TBase
    {
      private List<Trip> _success;

      public List<Trip> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public SearchTripByTouristAttractionAndLeavingHour_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<Trip>();
                  TList _list8 = iprot.ReadListBegin();
                  for( int _i9 = 0; _i9 < _list8.Count; ++_i9)
                  {
                    Trip _elem10 = new Trip();
                    _elem10 = new Trip();
                    _elem10.Read(iprot);
                    Success.Add(_elem10);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("SearchTripByTouristAttractionAndLeavingHour_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (Trip _iter11 in Success)
              {
                _iter11.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("SearchTripByTouristAttractionAndLeavingHour_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class notifyServer_args : TBase
    {

      public notifyServer_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("notifyServer_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("notifyServer_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class notifyServer_result : TBase
    {

      public notifyServer_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("notifyServer_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("notifyServer_result(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class addObserver_args : TBase
    {
      private int _port;

      public int Port
      {
        get
        {
          return _port;
        }
        set
        {
          __isset.port = true;
          this._port = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool port;
      }

      public addObserver_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                Port = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("addObserver_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.port) {
          field.Name = "port";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Port);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("addObserver_args(");
        sb.Append("Port: ");
        sb.Append(Port);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class addObserver_result : TBase
    {

      public addObserver_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("addObserver_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("addObserver_result(");
        sb.Append(")");
        return sb.ToString();
      }

    }

  }
}
