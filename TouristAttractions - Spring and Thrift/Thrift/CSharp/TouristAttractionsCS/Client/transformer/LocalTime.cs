/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace transformer
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class LocalTime : TBase
  {
    private int _hour;
    private int _minute;
    private int _second;

    public int Hour
    {
      get
      {
        return _hour;
      }
      set
      {
        __isset.hour = true;
        this._hour = value;
      }
    }

    public int Minute
    {
      get
      {
        return _minute;
      }
      set
      {
        __isset.minute = true;
        this._minute = value;
      }
    }

    public int Second
    {
      get
      {
        return _second;
      }
      set
      {
        __isset.second = true;
        this._second = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool hour;
      public bool minute;
      public bool second;
    }

    public LocalTime() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              Hour = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              Minute = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              Second = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("LocalTime");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.hour) {
        field.Name = "hour";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Hour);
        oprot.WriteFieldEnd();
      }
      if (__isset.minute) {
        field.Name = "minute";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Minute);
        oprot.WriteFieldEnd();
      }
      if (__isset.second) {
        field.Name = "second";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Second);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("LocalTime(");
      sb.Append("Hour: ");
      sb.Append(Hour);
      sb.Append(",Minute: ");
      sb.Append(Minute);
      sb.Append(",Second: ");
      sb.Append(Second);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
